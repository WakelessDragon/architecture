<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bean="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

    <bean id="exportSqlLauncher" class="com.rainyalley.architecture.batch.exportSql.ExportSqlLauncher">
        <property name="jobRunner" ref="jobRunner"/>
    </bean>

    <bean id="exportSqlReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
        <property name="dataSource" ref="#{jobParameters['dataSourceName']}"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean" >
                <property name="dataSource" ref="#{jobParameters['dataSourceName']}"/>
                <property name="selectClause" value="#{jobParameters['selectClause']}" />
                <property name="fromClause" value="#{jobParameters['fromClause']}" />
                <property name="whereClause" value="#{jobParameters['whereClause']}"/>
                <property name="sortKey" value="#{jobParameters['sortKey']}" />
            </bean>
        </property>
        <property name="pageSize" value="2" />
        <property name="rowMapper" ref="columnMapRowMapper"/>
        <property name="saveState" value="false"/>
    </bean>

    <bean id="csvItemFunction" class="com.rainyalley.architecture.batch.MapToStringFunction">
        <property name="delimiter" value=","/>
    </bean>
    <bean id="functionItemProcessor" class="org.springframework.batch.item.function.FunctionItemProcessor" scope="step">
        <constructor-arg index="0" ref="#{jobParameters['itemFunction']}"/>
    </bean>

    <bean id="exportSqlItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="headerCallback">
            <bean class="com.rainyalley.architecture.batch.StringHeaderCallback">
                <property name="header" value="#{jobParameters['fileHeader']}"/>
            </bean>
        </property>
        <property name="resource" value="file:/var/export/#{jobExecutionContext['jobExecutionId']}/file.csv"/>
        <property name="lineAggregator" ref="passThroughLineAggregator"/>
        <property name="saveState" value="false"/>
        <property name="appendAllowed" value="false"/>
        <property name="shouldDeleteIfExists" value="true"/>
    </bean>

    <bean:job id="exportSqlJob" job-repository="jobRepository" restartable="true">
        <bean:step id="exportSqlReadWrite">
            <bean:tasklet>
                <bean:chunk reader="exportSqlReader"
                       processor="functionItemProcessor"
                       writer="exportSqlItemWriter"
                       processor-transactional="false"
                       commit-interval="1000"
                       skip-limit="1"
                       retry-limit="3"  >
                    <bean:skippable-exception-classes>
                        <bean:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </bean:skippable-exception-classes>
                    <bean:retryable-exception-classes>
                        <bean:include class="java.io.IOException" />
                        <bean:include class="java.sql.SQLException" />
                    </bean:retryable-exception-classes>
                </bean:chunk>
                <bean:no-rollback-exception-classes>
                    <bean:include class="java.lang.Exception"/>
                </bean:no-rollback-exception-classes>
            </bean:tasklet>
            <bean:next on="COMPLETED" to="exportSqlCleanAfter" />
            <bean:listeners>
                <bean:listener>
                    <bean class="com.rainyalley.architecture.batch.ContextStepExecutionListener" scope="step"/>
                </bean:listener>
                <bean:listener>
                    <bean class="com.rainyalley.architecture.batch.CreateFileStepExecutionListener" scope="step">
                        <property name="filePath" value="/var/export/#{jobExecutionContext['jobExecutionId']}/file.csv"/>
                    </bean>
                </bean:listener>
            </bean:listeners>
        </bean:step>
        <bean:step id="exportSqlCleanAfter" allow-start-if-complete="true">
            <bean:tasklet allow-start-if-complete="true">
                <bean class="com.rainyalley.architecture.batch.DeleteDirTasklet" scope="step">
                    <property name="dirPath" value="/var/export/#{jobExecutionContext['jobExecutionId']}"/>
                </bean>
            </bean:tasklet>
        </bean:step>
    </bean:job>

</beans>