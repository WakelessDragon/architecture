<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jms="http://www.springframework.org/schema/jms"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd">

    <import resource="spring-common.xml" />

    <context:component-scan base-package="com.rainyalley.architecture.message" use-default-filters="false">
        <!-- 扫描符合@Controller的类 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>



    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" >
            <!-- 连接池 -->
            <bean class="org.apache.activemq.pool.PooledConnectionFactory">
                <property name="connectionFactory">
                    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
                    <bean  class="org.apache.activemq.ActiveMQConnectionFactory">
                        <property name="brokerURL" value="tcp://localhost:61616"/>
                    </bean>
                </property>
                <property name="maxConnections" value="10"/>
            </bean>
        </property>
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>


    <!-- PTP -->
    <!--这个是队列目的地，点对点的，随机选择一个consumer消费信息-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="testQueueSubject" />
    </bean>

    <!-- Pub/Sub -->
    <!--这个是主题目的地，一对多的，消息被所有consumer各消费一次-->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="testTopicSubject"/>
    </bean>

    <!-- 响应队列 -->
    <bean id="responseQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="testResponseQueueSubject" />
    </bean>



    <!-- 队列消息监听容器 -->
    <bean id="messageQueueListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" >
            <bean class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
                <property name="delegate" ref="messageConsumer" />
                <!-- 监听器的处理方法 -->
                <property name="defaultListenerMethod" value="onMessage"/>
                <!-- reply 到响应队列 -->
                <property name="defaultResponseDestination" ref="responseQueueDestination"/>
            </bean>
        </property>
        <!-- 打开事务管理，在consumer异常时消息回滚 。配置了transactionManager后该值将被忽略-->
        <property name="sessionTransacted" value="true"/>
        <property name="transactionManager" ref="jtaTransactionManager"/>
    </bean>


    <!-- 主题消息监听容器 -->
    <bean id="messageTopicListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="topicDestination" />
        <property name="messageListener" ref="messageSubscribe" />
    </bean>


    <!-- 响应队列消息监听容器 -->
    <bean id="responseQueueListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="responseQueueDestination" />
        <property name="messageListener" ref="responseConsumer" />
    </bean>


    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>


</beans>